{"version":3,"file":"safeApi.js","sources":["api/safeApi.js"],"sourcesContent":["/**\n * 安全API调用包装器\n * 自动处理错误，避免每次调用API都写try-catch\n */\n\nimport { createSafeApi } from '@/utils/errorHandler.js';\nimport { memoApi } from './memoApi.js';\nimport { userApi } from './userApi.js';\n\n// 创建安全的用户API\nexport const safeUserApi = createSafeApi(userApi, {\n  // 默认配置\n  showError: true,\n  errorMsg: '操作失败',\n  loading: false, // 用户操作一般不需要全局loading\n  onError: (error) => {\n    console.error('用户API错误:', error);\n    // 这里可以添加其他错误处理逻辑，如错误上报等\n  }\n});\n// 创建安全的备忘录API\nexport const safeMemoApi = createSafeApi(memoApi, {\n  // 默认配置\n  showError: true,\n  errorMsg: '获取备忘录失败', // 这将作为后备错误信息，优先使用后端返回的错误信息\n  loading: true,\n  loadingText: '加载中...',\n  // 可以添加错误回调函数，用于记录错误日志或执行其他操作\n  onError: (error) => {\n    console.error('备忘录API错误:', error);\n    // 这里可以添加其他错误处理逻辑，如错误上报等\n  }\n});\n// 特殊配置的登录API\nexport const safeLoginApi = {\n  login: (loginData, options = {}) => {\n    return createSafeApi(userApi, {\n      showError: true,\n      errorMsg: '登录失败',\n      loading: true,\n      loadingText: '登录中...',\n      onError: (error) => {\n        console.error('登录API错误:', error);\n      }\n    }).login(loginData, options);\n  }\n};"],"names":["createSafeApi","userApi","uni","memoApi"],"mappings":";;;;;AAU2BA,mBAAa,cAACC,qBAAS;AAAA;AAAA,EAEhD,WAAW;AAAA,EACX,UAAU;AAAA,EACV,SAAS;AAAA;AAAA,EACT,SAAS,CAAC,UAAU;AAClBC,kBAAA,MAAA,MAAA,SAAA,wBAAc,YAAY,KAAK;AAAA,EAEhC;AACH,CAAC;AAEW,MAAC,cAAcF,mBAAa,cAACG,qBAAS;AAAA;AAAA,EAEhD,WAAW;AAAA,EACX,UAAU;AAAA;AAAA,EACV,SAAS;AAAA,EACT,aAAa;AAAA;AAAA,EAEb,SAAS,CAAC,UAAU;AAClBD,kBAAA,MAAA,MAAA,SAAA,wBAAc,aAAa,KAAK;AAAA,EAEjC;AACH,CAAC;;"}