{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\n * 网络请求封装\n * 基于 uni.request 实现跨平台请求\n */\n\nimport { requestConfig } from '@/config/index.js'\n\n// 请求拦截器\nconst requestInterceptor = (options) => {\n  // 添加 token\n  const token = uni.getStorageSync('token')\n  if (token) {\n    options.header.Authorization = `Bearer ${token}`\n  }\n  \n  // 添加时间戳防止缓存\n  if (options.method === 'GET') {\n    options.url += (options.url.includes('?') ? '&' : '?') + `_t=${Date.now()}`\n  }\n  \n  return options\n}\n\n// 响应拦截器\nconst responseInterceptor = (response) => {\n  const { statusCode, data } = response\n  \n  // 请求成功\n  if (statusCode === 200) {\n    // 这里可以根据后端的响应格式调整\n    if (data.code === 200 || data.code === 0) {\n      return data.data || data\n    } else {\n      // 业务错误\n      uni.showToast({\n        title: data.message || '请求失败',\n        icon: 'none'\n      })\n      return Promise.reject(data)\n    }\n  } else {\n    // HTTP 错误\n    uni.showToast({\n      title: `网络错误: ${statusCode}`,\n      icon: 'none'\n    })\n    return Promise.reject(response)\n  }\n}\n\n// 错误处理\nconst errorHandler = (error) => {\n  console.error('请求错误:', error)\n  \n  // 网络错误\n  if (error.errMsg && error.errMsg.includes('timeout')) {\n    uni.showToast({\n      title: '请求超时',\n      icon: 'none'\n    })\n  } else if (error.errMsg && error.errMsg.includes('fail')) {\n    uni.showToast({\n      title: '网络连接失败',\n      icon: 'none'\n    })\n  }\n  \n  return Promise.reject(error)\n}\n\n// 核心请求方法\nconst request = (options) => {\n  return new Promise((resolve, reject) => {\n    // 合并配置\n    const requestOptions = {\n      url: requestConfig.baseURL + options.url,\n      method: options.method || 'GET',\n      data: options.data || {},\n      header: {\n        ...requestConfig.header,\n        ...options.header\n      },\n      timeout: options.timeout || requestConfig.timeout,\n      success: (res) => {\n        try {\n          const result = responseInterceptor(res)\n          resolve(result)\n        } catch (error) {\n          reject(error)\n        }\n      },\n      fail: (err) => {\n        const error = errorHandler(err)\n        reject(error)\n      }\n    }\n    \n    // 执行请求拦截器\n    const finalOptions = requestInterceptor(requestOptions)\n    \n    // 发起请求\n    uni.request(finalOptions)\n  })\n}\n\n// 便捷方法\nexport const http = {\n  // GET 请求\n  get(url, params = {}, options = {}) {\n    return request({\n      url,\n      method: 'GET',\n      data: params,\n      ...options\n    })\n  },\n  \n  // POST 请求\n  post(url, data = {}, options = {}) {\n    return request({\n      url,\n      method: 'POST',\n      data,\n      ...options\n    })\n  },\n  \n  // PUT 请求\n  put(url, data = {}, options = {}) {\n    return request({\n      url,\n      method: 'PUT',\n      data,\n      ...options\n    })\n  },\n  \n  // DELETE 请求\n  delete(url, params = {}, options = {}) {\n    return request({\n      url,\n      method: 'DELETE',\n      data: params,\n      ...options\n    })\n  }\n}\n\n// 导出原始请求方法（如果需要）\nexport { request } "],"names":["uni","requestConfig"],"mappings":"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"}