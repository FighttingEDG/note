{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\n * 网络请求封装\n * 基于 uni.request 实现跨平台请求\n * 增加全局错误处理，避免每个请求都写try-catch\n */\n\nimport {\n\trequestConfig\n} from '@/config/index.js'\n// 工具函数：将对象转为查询字符串\nfunction serializeParams(params = {}) {\n\treturn Object.keys(params)\n\t\t.map(key => `${encodeURIComponent(key)}=${encodeURIComponent(params[key])}`)\n\t\t.join('&')\n}\n// 请求拦截器\nconst requestInterceptor = (options) => {\n\t// 添加 token\n\tconst token = uni.getStorageSync('token')\n\tif (token) {\n\t\toptions.header.Authorization = `Bearer ${token}`\n\t}\n\n\t// 添加时间戳防止缓存\n\tif (options.method === 'GET') {\n\t\toptions.url += (options.url.includes('?') ? '&' : '?') + `_t=${Date.now()}`\n\t}\n\n\treturn options\n}\n\n// 响应拦截器\nconst responseInterceptor = (response) => {\n\tconst {\n\t\tstatusCode,\n\t\tdata\n\t} = response\n\n\t// 请求成功\n\tif (statusCode === 200) {\n\t\t// 这里可以根据后端的响应格式调整\n\t\tif (data.code === 200 || data.code === 0) {\n\t\t\treturn data.data || data\n\t\t} else {\n\t\t\t// 业务错误 - 不在这里显示错误提示，而是传递给errorHandler.js处理\n\t\t\t// 创建一个包含message的错误对象\n\t\t\tconst error = new Error(data.message || '请求失败');\n\t\t\terror.data = data; // 保存原始数据，以便错误处理函数可以访问\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t} else {\n\t\t// HTTP 错误 - 不在这里显示错误提示，而是传递给errorHandler.js处理\n\t\tconst error = new Error(`网络错误: ${statusCode}`);\n\t\terror.statusCode = statusCode;\n\t\terror.response = response;\n\t\treturn Promise.reject(error);\n\t}\n}\n\n// 错误处理\nconst errorHandler = (error) => {\n\tconsole.error('请求错误:', error)\n\n\t// 处理网络错误\n\tif (error.errMsg) {\n\t\tif (error.errMsg.includes('timeout')) {\n\t\t\t// 创建一个包含message的错误对象\n\t\t\tconst timeoutError = new Error('请求超时');\n\t\t\ttimeoutError.originalError = error;\n\t\t\treturn Promise.reject(timeoutError);\n\t\t} else if (error.errMsg.includes('fail')) {\n\t\t\t// 创建一个包含message的错误对象\n\t\t\tconst networkError = new Error('网络连接失败');\n\t\t\tnetworkError.originalError = error;\n\t\t\treturn Promise.reject(networkError);\n\t\t}\n\t}\n\n\t// 如果已经是Error对象（来自responseInterceptor），直接返回\n\treturn Promise.reject(error);\n}\n\n// 核心请求方法\nconst request = (options) => {\n\treturn new Promise((resolve, reject) => {\n\t\t// 合并配置\n\t\tconst requestOptions = {\n\t\t\turl: requestConfig.baseURL + options.url,\n\t\t\tmethod: options.method || 'GET',\n\t\t\tdata: options.data || {},\n\t\t\theader: {\n\t\t\t\t...requestConfig.header,\n\t\t\t\t...options.header\n\t\t\t},\n\t\t\ttimeout: options.timeout || requestConfig.timeout,\n\t\t\tsuccess: (res) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst result = responseInterceptor(res)\n\t\t\t\t\tresolve(result)\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error)\n\t\t\t\t}\n\t\t\t},\n\t\t\tfail: (err) => {\n\t\t\t\tconst error = errorHandler(err)\n\t\t\t\treject(error)\n\t\t\t}\n\t\t}\n\n\t\t// 执行请求拦截器\n\t\tconst finalOptions = requestInterceptor(requestOptions)\n\n\t\t// 发起请求\n\t\tuni.request(finalOptions)\n\t})\n}\n\n// 全局错误处理包装函数\nconst withErrorHandler = (requestPromise) => {\n\treturn requestPromise.catch(error => {\n\t\t// 错误已经在 errorHandler 和 responseInterceptor 中处理过\n\t\t// 这里只需要返回一个被拒绝的 Promise，让调用链继续\n\t\treturn Promise.reject(error);\n\t});\n};\n\n// 便捷方法\nexport const http = {\n\t// GET 请求\n\tget(url, params = {}, options = {}) {\n\t\tconst query = serializeParams(params)\n\t\tif (query) {\n\t\t\turl += (url.includes('?') ? '&' : '?') + query\n\t\t}\n\t\treturn withErrorHandler(request({\n\t\t\turl,\n\t\t\tmethod: 'GET',\n\t\t\t...options\n\t\t}));\n\t},\n\n\t// POST 请求\n\tpost(url, data = {}, options = {}) {\n\t\treturn withErrorHandler(request({\n\t\t\turl,\n\t\t\tmethod: 'POST',\n\t\t\tdata,\n\t\t\t...options\n\t\t}));\n\t},\n\n\t// PUT 请求\n\tput(url, data = {}, options = {}) {\n\t\treturn withErrorHandler(request({\n\t\t\turl,\n\t\t\tmethod: 'PUT',\n\t\t\tdata,\n\t\t\t...options\n\t\t}));\n\t},\n\n\t// DELETE 请求\n\tdelete(url, params = {}, options = {}) {\n\t\treturn withErrorHandler(request({\n\t\t\turl,\n\t\t\tmethod: 'DELETE',\n\t\t\tdata: params,\n\t\t\t...options\n\t\t}));\n\t}\n}\n\n// 导出原始请求方法（如果需要）\nexport {\n\trequest\n}"],"names":["uni","requestConfig"],"mappings":"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"}